#This service is used to delare all common service used by other "childs" services

service: cm-sharedresources-main
useDotenv: true

# app and org for use with dashboard.serverless.com
app: cm


provider:
  name: aws
  region: eu-central-1
  runtime: nodejs12.x
  stage : ${env:DEPLOY_STAGE}
  

  environment:
    IP_TABLE : CMPeople${self:custom.stage_suffix.${self:provider.stage}, self:custom.stage_suffix.other}
    IA_TABLE : CMAuthorization${self:custom.stage_suffix.${self:provider.stage}, self:custom.stage_suffix.other}
    S3_BUCKET : cm-storage-bucket${self:custom.stage_suffix.${self:provider.stage}, self:custom.stage_suffix.other}

custom:
  stage_suffix:
    dev: ""
    other: -${self:provider.stage}

resources:
  Resources:
    CMPeople:
      Type: AWS::DynamoDB::Table
      #DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.IP_TABLE}
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
          - AttributeName: GSI1PK
            AttributeType: S
          - AttributeName: GSI2PK
            AttributeType: S
          - AttributeName: GSI2SK
            AttributeType: S
          - AttributeName: GSI3PK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: GSI1
            KeySchema:
            - AttributeName: GSI1PK
              KeyType: HASH
            - AttributeName: PK
              KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
          - IndexName: GSI2
            KeySchema:
            - AttributeName: GSI2PK
              KeyType: HASH
            - AttributeName: GSI2SK
              KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
          - IndexName: GSI3
            KeySchema:
            - AttributeName: GSI3PK
              KeyType: HASH
            - AttributeName: SK
              KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1


    CMAuthorization:
      Type: AWS::DynamoDB::Table
      #DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.IA_TABLE}
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

            
    CognitoUserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        MfaConfiguration: OFF
        UserPoolName: CM-UserPool-${self:provider.stage}
        UsernameAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: False
            RequireNumbers: True
            RequireSymbols: False
            RequireUppercase: True

    CognitoUserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: CM-UserPool-Client-${self:provider.stage}
        UserPoolId:
          Ref: CognitoUserPool

    CognitoUserIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: CM_UserIdentityPool-${self:provider.stage}
        AllowUnauthenticatedIdentities: false
        CognitoIdentityProviders:
          - ClientId:
              Ref: CognitoUserPoolClient
            ProviderName:
              Fn::GetAtt: [ "CognitoUserPool", "ProviderName" ]

              
    UserIdentityPoolRoles: 
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId:
          Ref: CognitoUserIdentityPool
        Roles: 
          authenticated:  
            Fn::GetAtt: [VisitorRole, Arn]
        RoleMappings:
          UserPool:
            IdentityProvider:
              Fn::Join:
                - ""
                - 
                  - Fn::GetAtt: [ "CognitoUserPool", "ProviderName" ]
                  - ":"
                  - Ref: CognitoUserPoolClient
            Type: Token
            AmbiguousRoleResolution: Deny # "AuthenticatedRole" if you want the default role for users without groups


###### ROLES #######

    CampusAdminRole:
      Type: "AWS::IAM::Role"
      Properties:
        Path: /
        AssumeRolePolicyDocument:
          Statement:
            - Effect: 'Allow'
              Principal:
                Federated: 'cognito-identity.amazonaws.com'
              Action:
                - 'sts:AssumeRoleWithWebIdentity'
              Condition:
                StringEquals:
                  'cognito-identity.amazonaws.com:aud':
                    Ref: CognitoUserIdentityPool
                'ForAnyValue:StringLike':
                  'cognito-identity.amazonaws.com:amr': authenticated

    EmployeeRole:
      Type: "AWS::IAM::Role"
      Properties:
        Path: /
        AssumeRolePolicyDocument:
          Statement:
            - Effect: 'Allow'
              Principal:
                Federated: 'cognito-identity.amazonaws.com'
              Action:
                - 'sts:AssumeRoleWithWebIdentity'
              Condition:
                StringEquals:
                  'cognito-identity.amazonaws.com:aud':
                    Ref: CognitoUserIdentityPool
                'ForAnyValue:StringLike':
                  'cognito-identity.amazonaws.com:amr': authenticated

    VisitorRole:
      Type: "AWS::IAM::Role"
      Properties:
        Path: /
        AssumeRolePolicyDocument:
          Statement:
            - Effect: 'Allow'
              Principal:
                Federated: 'cognito-identity.amazonaws.com'
              Action:
                - 'sts:AssumeRoleWithWebIdentity'
              Condition:
                StringEquals:
                  'cognito-identity.amazonaws.com:aud':
                    Ref: CognitoUserIdentityPool
                'ForAnyValue:StringLike':
                  'cognito-identity.amazonaws.com:amr': authenticated





###### GROUPS #######

    CampusAdminGroup:
      Type: "AWS::Cognito::UserPoolGroup"
      Properties:
        GroupName: campus_admin_group
        UserPoolId:
          Ref: CognitoUserPool
        RoleArn:
          Fn::GetAtt: [ CampusAdminRole, Arn ]


    EmployeeGroup:
      Type: "AWS::Cognito::UserPoolGroup"
      Properties:
        GroupName: employee_group
        UserPoolId:
          Ref: CognitoUserPool
        RoleArn:
          Fn::GetAtt: [ EmployeeRole, Arn ]
          
    VisitorGroup:
      Type: "AWS::Cognito::UserPoolGroup"
      Properties:
        GroupName: visitor_group 
        UserPoolId:
          Ref: CognitoUserPool
        RoleArn:
          Fn::GetAtt: [ VisitorRole, Arn ]
    


    #     Fn::GetAtt: [ ISLocalServerAccessKey, SecretAccessKey ]

###### POLICIES #######
            
    CampusAdminGroupApiPolicy:
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: CampusAdminGroupApiPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Action:
                - 's3:GetObject'
              Resource:
                Fn::Join:
                  - ''
                  -
                    - 'arn:aws:s3:::'
                    - Ref: S3DocumentsBucket
                    - '/uploads/*'
            - Effect: 'Allow'
              Action:
                - 'execute-api:Invoke'
              Resource:
                Fn::Join:
                  - ''
                  -
                    - 'arn:aws:execute-api:'
                    - Ref: AWS::Region
                    - ':'
                    - Ref: AWS::AccountId
                    - ':'
                    - Ref: ApiGatewayRestApi
                    - '/*'
        Roles:
          - Ref: CampusAdminRole

    EmployeeGroupApiPolicy:
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: EmployeeGroupApiPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Action:
                - 's3:GetObject'
              Resource:
                Fn::Join:
                  - ''
                  -
                    - 'arn:aws:s3:::'
                    - Ref: S3DocumentsBucket
                    - '/uploads/*'
            - Effect: 'Allow'
              Action:
                - 'execute-api:Invoke'
              Resource:
                Fn::Join:
                  - ''
                  -
                    - 'arn:aws:execute-api:'
                    - Ref: AWS::Region
                    - ':'
                    - Ref: AWS::AccountId
                    - ':'
                    - Ref: ApiGatewayRestApi
                    - '/*/GET/CompanyXCustomer/ByCompanies'
            - Effect: 'Allow'
              Action:
                - 'execute-api:Invoke'
              Resource:
                Fn::Join:
                  - ''
                  -
                    - 'arn:aws:execute-api:'
                    - Ref: AWS::Region
                    - ':'
                    - Ref: AWS::AccountId
                    - ':'
                    - Ref: ApiGatewayRestApi
                    - '/*/GET/CampusXCompanyXUser'
            - Effect: 'Allow'
              Action:
                - 'execute-api:Invoke'
              Resource:
                Fn::Join:
                  - ''
                  -
                    - 'arn:aws:execute-api:'
                    - Ref: AWS::Region
                    - ':'
                    - Ref: AWS::AccountId
                    - ':'
                    - Ref: ApiGatewayRestApi
                    - '/*/GET/CampusXCompanyXUser/UserDeletedParentCompaniesAndCampuses'
            - Effect: 'Allow'
              Action:
                - 'execute-api:Invoke'
              Resource:
                Fn::Join:
                  - ''
                  -
                    - 'arn:aws:execute-api:'
                    - Ref: AWS::Region
                    - ':'
                    - Ref: AWS::AccountId
                    - ':'
                    - Ref: ApiGatewayRestApi
                    - '/*/GET/CampusXCompanyXUser/UserParentCompaniesAndCampuses'
            - Effect: 'Allow'
              Action:
                - 'execute-api:Invoke'
              Resource:
                Fn::Join:
                  - ''
                  -
                    - 'arn:aws:execute-api:'
                    - Ref: AWS::Region
                    - ':'
                    - Ref: AWS::AccountId
                    - ':'
                    - Ref: ApiGatewayRestApi
                    - '/*/GET/CampusXCompanyXUser/CampusVisitors'
            - Effect: 'Allow'
              Action:
                - 'execute-api:Invoke'
              Resource:
                Fn::Join:
                  - ''
                  -
                    - 'arn:aws:execute-api:'
                    - Ref: AWS::Region
                    - ':'
                    - Ref: AWS::AccountId
                    - ':'
                    - Ref: ApiGatewayRestApi
                    - '/*/GET/Company'
            - Effect: 'Allow'
              Action:
                - 'execute-api:Invoke'
              Resource:
                Fn::Join:
                  - ''
                  -
                    - 'arn:aws:execute-api:'
                    - Ref: AWS::Region
                    - ':'
                    - Ref: AWS::AccountId
                    - ':'
                    - Ref: ApiGatewayRestApi
                    - '/*/GET/User'
            - Effect: 'Allow'
              Action:
                - 'execute-api:Invoke'
              Resource:
                Fn::Join:
                  - ''
                  -
                    - 'arn:aws:execute-api:'
                    - Ref: AWS::Region
                    - ':'
                    - Ref: AWS::AccountId
                    - ':'
                    - Ref: ApiGatewayRestApi
                    - '/*/PUT/User/MyTelephoneNumber'
            - Effect: 'Allow'
              Action:
                - 'execute-api:Invoke'
              Resource:
                Fn::Join:
                  - ''
                  -
                    - 'arn:aws:execute-api:'
                    - Ref: AWS::Region
                    - ':'
                    - Ref: AWS::AccountId
                    - ':'
                    - Ref: ApiGatewayRestApi
                    - '/*/POST/User/Visitor'
            - Effect: 'Allow'
              Action:
                - 'execute-api:Invoke'
              Resource:
                Fn::Join:
                  - ''
                  -
                    - 'arn:aws:execute-api:'
                    - Ref: AWS::Region
                    - ':'
                    - Ref: AWS::AccountId
                    - ':'
                    - Ref: ApiGatewayRestApi
                    - '/*/POST/User/Photo'
            - Effect: 'Allow'
              Action:
                - 'execute-api:Invoke'
              Resource:
                Fn::Join:
                  - ''
                  -
                    - 'arn:aws:execute-api:'
                    - Ref: AWS::Region
                    - ':'
                    - Ref: AWS::AccountId
                    - ':'
                    - Ref: ApiGatewayRestApi
                    - '/*/DELETE/Visitor/MyRequest'
            - Effect: 'Allow'
              Action:
                - 'execute-api:Invoke'
              Resource:
                Fn::Join:
                  - ''
                  -
                    - 'arn:aws:execute-api:'
                    - Ref: AWS::Region
                    - ':'
                    - Ref: AWS::AccountId
                    - ':'
                    - Ref: ApiGatewayRestApi
                    - '/*/GET/Visitor'
            - Effect: 'Allow'
              Action:
                - 'execute-api:Invoke'
              Resource:
                Fn::Join:
                  - ''
                  -
                    - 'arn:aws:execute-api:'
                    - Ref: AWS::Region
                    - ':'
                    - Ref: AWS::AccountId
                    - ':'
                    - Ref: ApiGatewayRestApi
                    - '/*/GET/Visitor/MyRequests'
            - Effect: 'Allow'
              Action:
                - 'execute-api:Invoke'
              Resource:
                Fn::Join:
                  - ''
                  -
                    - 'arn:aws:execute-api:'
                    - Ref: AWS::Region
                    - ':'
                    - Ref: AWS::AccountId
                    - ':'
                    - Ref: ApiGatewayRestApi
                    - '/*/POST/Visitor/MyRequest'
            - Effect: 'Allow'
              Action:
                - 'execute-api:Invoke'
              Resource:
                Fn::Join:
                  - ''
                  -
                    - 'arn:aws:execute-api:'
                    - Ref: AWS::Region
                    - ':'
                    - Ref: AWS::AccountId
                    - ':'
                    - Ref: ApiGatewayRestApi
                    - '/*/GET/Visitor/Host'
            - Effect: 'Allow'
              Action:
                - 'execute-api:Invoke'
              Resource:
                Fn::Join:
                  - ''
                  -
                    - 'arn:aws:execute-api:'
                    - Ref: AWS::Region
                    - ':'
                    - Ref: AWS::AccountId
                    - ':'
                    - Ref: ApiGatewayRestApi
                    - '/*/GET/Visitor/Status'
            - Effect: 'Allow'
              Action:
                - 'execute-api:Invoke'
              Resource:
                Fn::Join:
                  - ''
                  -
                    - 'arn:aws:execute-api:'
                    - Ref: AWS::Region
                    - ':'
                    - Ref: AWS::AccountId
                    - ':'
                    - Ref: ApiGatewayRestApi
                    - '/*/GET/Authorization'
        Roles:
          - Ref: EmployeeRole
        
    VisitorGroupApiPolicy:
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: VisitorGroupApiPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Action:
                - 's3:GetObject'
              Resource:
                Fn::Join:
                  - ''
                  -
                    - 'arn:aws:s3:::'
                    - Ref: S3DocumentsBucket
                    - '/uploads/*'
            - Effect: 'Allow'
              Action:
                - 'execute-api:Invoke'
              Resource:
                Fn::Join:
                  - ''
                  -
                    - 'arn:aws:execute-api:'
                    - Ref: AWS::Region
                    - ':'
                    - Ref: AWS::AccountId
                    - ':'
                    - Ref: ApiGatewayRestApi
                    - '/*/GET/CampusXCompanyXUser'
            - Effect: 'Allow'
              Action:
                - 'execute-api:Invoke'
              Resource:
                Fn::Join:
                  - ''
                  -
                    - 'arn:aws:execute-api:'
                    - Ref: AWS::Region
                    - ':'
                    - Ref: AWS::AccountId
                    - ':'
                    - Ref: ApiGatewayRestApi
                    - '/*/GET/CampusXCompanyXUser/UserDeletedParentCompaniesAndCampuses'
            - Effect: 'Allow'
              Action:
                - 'execute-api:Invoke'
              Resource:
                Fn::Join:
                  - ''
                  -
                    - 'arn:aws:execute-api:'
                    - Ref: AWS::Region
                    - ':'
                    - Ref: AWS::AccountId
                    - ':'
                    - Ref: ApiGatewayRestApi
                    - '/*/GET/CampusXCompanyXUser/UserParentCompaniesAndCampuses'
            - Effect: 'Allow'
              Action:
                - 'execute-api:Invoke'
              Resource:
                Fn::Join:
                  - ''
                  -
                    - 'arn:aws:execute-api:'
                    - Ref: AWS::Region
                    - ':'
                    - Ref: AWS::AccountId
                    - ':'
                    - Ref: ApiGatewayRestApi
                    - '/*/GET/Company'
            - Effect: 'Allow'
              Action:
                - 'execute-api:Invoke'
              Resource:
                Fn::Join:
                  - ''
                  -
                    - 'arn:aws:execute-api:'
                    - Ref: AWS::Region
                    - ':'
                    - Ref: AWS::AccountId
                    - ':'
                    - Ref: ApiGatewayRestApi
                    - '/*/GET/User'
            - Effect: 'Allow'
              Action:
                - 'execute-api:Invoke'
              Resource:
                Fn::Join:
                  - ''
                  -
                    - 'arn:aws:execute-api:'
                    - Ref: AWS::Region
                    - ':'
                    - Ref: AWS::AccountId
                    - ':'
                    - Ref: ApiGatewayRestApi
                    - '/*/POST/User/Photo'
            - Effect: 'Allow'
              Action:
                - 'execute-api:Invoke'
              Resource:
                Fn::Join:
                  - ''
                  -
                    - 'arn:aws:execute-api:'
                    - Ref: AWS::Region
                    - ':'
                    - Ref: AWS::AccountId
                    - ':'
                    - Ref: ApiGatewayRestApi
                    - '/*/GET/Authorization'
        Roles:
          - Ref: VisitorRole
###### END ######

  
    ApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: CM-ApiGateway-${self:provider.stage}
        BinaryMediaTypes:
        - 'multipart/form-data' 

    ApiGatewayAuthorizer:
      DependsOn:
        - ApiGatewayRestApi
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: CM-cognito-API-authorizer-${self:provider.stage}
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt: [CognitoUserPool, Arn]



    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters: 
            gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
            gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
            gatewayresponse.header.Access-Control-Allow-Methods: "'POST,GET,PUT,DELETE,OPTIONS'"
            gatewayresponse.header.Accept-Language: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi


    GatewayResponseAccessDenied:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters: 
            gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
            gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
            gatewayresponse.header.Access-Control-Allow-Methods: "'POST,GET,PUT,DELETE,OPTIONS'"
            gatewayresponse.header.Accept-Language: "'*'"
        ResponseType: ACCESS_DENIED
        RestApiId:
          Ref: ApiGatewayRestApi


    GatewayResponseInternalError:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters: 
            gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
            gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
            gatewayresponse.header.Access-Control-Allow-Methods: "'POST,GET,PUT,DELETE,OPTIONS'"
            gatewayresponse.header.Accept-Language: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: ApiGatewayRestApi

          

    S3DocumentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: AuthenticatedRead        
        BucketName: ${self:provider.environment.S3_BUCKET}
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD


    # AccessPointUploadsS3Bucket:
    #   Type: AWS::S3::AccessPoint
    #   Properties:
    #     Bucket: 'cm-storage-bucket'
    #     Name: 'cm-uploads-endpoint'
    #    # NetworkOrigin: 'VPC'
        

  #Export all resources        
  Outputs:
      ApiGatewayRestApiId:
        Value:
          Ref: ApiGatewayRestApi
        Export:
          Name: ${self:provider.stage}-ExtApiGatewayRestApiId

      ApiGatewayRestApiRootResourceId:
        Value:
            Fn::GetAtt:
            - ApiGatewayRestApi
            - RootResourceId 
        Export:
          Name: ${self:provider.stage}-ExtApiGatewayRestApiRootResourceId

      ApiGatewayAuthorizerRef: 
        Value:
          Ref: ApiGatewayAuthorizer
        Export:
          Name: ${self:provider.stage}-ApiGatewayAuthorizer

      CMPeopleRef:
        Value:
          Ref: CMPeople
        Export:
          Name: ${self:provider.stage}-CMPeople

      CMPeopleArnRef:
        Value: 
          !GetAtt CMPeople.Arn
        Export:
          Name: ${self:provider.stage}-CMPeopleArn

      CMAuthorizationRef:
        Value:
          Ref: CMAuthorization
        Export:
          Name: ${self:provider.stage}-CMAuthorization

      CMAuthorizationArnRef:
        Value: 
          !GetAtt CMAuthorization.Arn
        Export:
          Name: ${self:provider.stage}-CMAuthorizationArn

      S3DocumentsBucketRef:
        Value:
          Ref: S3DocumentsBucket
        Export:
          Name: ${self:provider.stage}-S3DocumentsBucket

      S3DocumentsBucketArnRef:
        Value: 
          !GetAtt S3DocumentsBucket.Arn
        Export:
          Name: ${self:provider.stage}-S3DocumentsBucketArn

      CognitoUserPoolRef:
        Value:
          Ref: CognitoUserPool
        Export:
          Name: ${self:provider.stage}-CognitoUserPool

      CognitoUserPoolArnRef:
        Value: 
          !GetAtt CognitoUserPool.Arn
        Export:
          Name: ${self:provider.stage}-CognitoUserPoolArn
      
      CampusAdminRoleArnRef:
        Value: 
          !GetAtt CampusAdminRole.Arn
        Export:
          Name: ${self:provider.stage}-CampusAdminRoleArn

      EmployeeRoleArnRef:
        Value: 
          !GetAtt EmployeeRole.Arn
        Export:
          Name: ${self:provider.stage}-EmployeeRoleArn

      VisitorRoleArnRef:
        Value: 
          !GetAtt VisitorRole.Arn
        Export:
          Name: ${self:provider.stage}-VisitorRoleArn


     